{
    "name": "DigitalMarketplace",
    "structs": {},
    "methods": [
        {
            "name": "create_application",
            "args": [
                {
                    "type": "address",
                    "name": "freelancer_address"
                },
                {
                    "type": "uint64",
                    "name": "escrow_amount"
                },
                {
                    "type": "uint64",
                    "name": "asset_id"
                },
                {
                    "type": "uint64",
                    "name": "unitary_price"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Initializes the escrow contract with Client/Freelancer/Amount/Status.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_price",
            "args": [
                {
                    "type": "uint64",
                    "name": "unitary_price"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Updates unitary_price (Kept for template compatibility).",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "opt_in_to_asset",
            "args": [
                {
                    "type": "pay",
                    "name": "mbr_pay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Client funds the escrow contract and sets status to FUNDED (1).",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buy",
            "args": [
                {
                    "type": "pay",
                    "name": "buyer_txn"
                },
                {
                    "type": "uint64",
                    "name": "quantity"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Client approves work, releasing the escrow funds to the Freelancer.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "cancel_job",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Client cancels the job, refunding the funds back to the Client.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_application",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "DeleteApplication"
                ]
            },
            "readonly": false,
            "desc": "Deletes the application, reclaiming the min balance reserve.",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 4,
                "bytes": 2
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "client_addr": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "Y2xpZW50X2FkZHI="
                },
                "freelancer_addr": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "ZnJlZWxhbmNlcl9hZGRy"
                },
                "escrow_amount": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZXNjcm93X2Ftb3VudA=="
                },
                "asset_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNzZXRfaWQ="
                },
                "status": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c3RhdHVz"
                },
                "unitary_price": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dW5pdGFyeV9wcmljZQ=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        386,
                        431,
                        494
                    ],
                    "errorMessage": "Address length is 32 bytes"
                },
                {
                    "pc": [
                        161
                    ],
                    "errorMessage": "OnCompletion must be DeleteApplication && can only call when not creating"
                },
                {
                    "pc": [
                        97
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        294,
                        314,
                        324
                    ],
                    "errorMessage": "check self.asset_id exists"
                },
                {
                    "pc": [
                        272,
                        362,
                        410,
                        456,
                        489
                    ],
                    "errorMessage": "check self.client_addr exists"
                },
                {
                    "pc": [
                        302,
                        390,
                        435
                    ],
                    "errorMessage": "check self.escrow_amount exists"
                },
                {
                    "pc": [
                        381
                    ],
                    "errorMessage": "check self.freelancer_addr exists"
                },
                {
                    "pc": [
                        266,
                        370,
                        419,
                        464,
                        474
                    ],
                    "errorMessage": "check self.status exists"
                },
                {
                    "pc": [
                        172
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>"
                },
                {
                    "pc": [
                        180,
                        189,
                        198,
                        239,
                        358
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint64"
                },
                {
                    "pc": [
                        262,
                        351
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAEAAEIICYGBnN0YXR1cwtjbGllbnRfYWRkcg1lc2Nyb3dfYW1vdW50CGFzc2V0X2lkD2ZyZWVsYW5jZXJfYWRkcg11bml0YXJ5X3ByaWNlgAQzs0meNhoAjgEAOzEZFEQxGEEAJIIEBMx2ADcEFXRTWgR5C/WfBAeP1Qc2GgCOBABeAHMAzQENAIAEBlO3FzYaAI4BAA0AMRmBBRIxGBBEQgEgNhoBSRUlEkQ2GgJJFSQSRBc2GgNJFSQSRBc2GgRJFSQSRBdLAzEAE0QpMQBnJwRPBGcqTwNnK08CZygiZycFTGcjQzYaAUkVJBJEFzEAMgkSRCcFTGcjQzEWIwlJOBAjEkQiKGVEFEQiKWVESTEAEkRLATgAEkRJOAcyChJEIitlRBREOAgiKmVEMgAID0QoI2ciK2VEQQAXsTIAIitlRDIKIrISshSyEYEEshCyAbMjQzEWIwk4ECMSRDYaARUkEkQiKWVEMQASRCIoZUQjEkSxMgAiJwRlREkVJRJEIiplRLIIsgcjshCyAbMogQJnI0MiKWVESTEAEkQiKGVEIxJEsTIASwEVJRJEIiplRLIITLIHI7IQsgGzKIEDZyNDIillRDEAEkQiKGVEgQISQAAKIihlRIEDEkEAHiNEsTIAIillREkVJRJESbIJIrIIsgcjshCyAbMjQyJC/98=",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 3,
            "patch": 2
        }
    },
    "events": [],
    "templateVariables": {}
}